# This is a basic workflow to help you get started with Actions

name: Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - main
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    env:
      ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

 # Install the latest version of the Terraform CLI
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check

 # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
#  - name: Terraform Init
#         run: terraform init |
#           export ARM_CLIENT_ID=$ARM_CLIENT_ID
#           export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
#           export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
#           export ARM_TENANT_ID=$ARM_TENANT_ID

#       - name: Terraform Plan
#         run: terraform plan |
#             export ARM_CLIENT_ID=$ARM_CLIENT_ID
#             export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
#             export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
#             export ARM_TENANT_ID=$ARM_TENANT_ID
        
      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve  

#     steps:
# # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#  # Install the latest version of the Terraform CLI
#     - name: 'Setup Terraform'
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_wrapper: false
    
#     # Log into Azure with OIDC integration
#     # - name: 'Az CLI login'
#     #   uses: azure/login@v1
#     #   with:
#     #     client-secret: "${{ secrets.AZURE_CLIENT_SECRET }}"
#     #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
#     #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#     #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#  # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init |
#         export ARM_CLIENT_ID=$ARM_CLIENT_ID
#         export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
#         export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
#         export ARM_TENANT_ID=$ARM_TENANT_ID
        
#     - name: Terraform Format
#       run: terraform fmt   

#     - name: Terraform plan 
#       run: terraform plan 

#     - name: Terraform apply
#       run: terraform apply -auto-approve
  


#       name: "Terraform"

# on:
#   push:
#     branches:
#       - main

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     defaults:
#       run:
#         working-directory: src
    